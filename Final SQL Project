# For this project, I downloaded a dataset called "chinook," which represents a digital media store and includes tables for artists, albums, media tracks, invoices, customers, and employee information.

# The following SQL was written to answer specific questions about the information within the chinook dataset.


#1. List all the customers from Germany.
SELECT *
FROM chinook.customers
WHERE country = 'Germany'
ORDER BY CustomerId ASC;

#2. Find the invoices of customers who are from Germany (include the customer’s full name, invoice ID, date of the invoice, and billing country).
SELECT cust.FirstName, cust.LastName, inv.InvoiceId, inv.BillingCountry, inv.InvoiceDate
FROM chinook.invoices AS inv
LEFT JOIN chinook.customers AS cust
ON inv.CustomerId = cust.CustomerId
WHERE inv.BillingCountry = 'Germany';

#3. What is the total number of invoices and the average invoice amount?
SELECT COUNT(*) AS total_invoices, AVG(total) AS average_invoice_amount
FROM chinook.invoices;

#4. Calculate the total revenue generated by customers in Canada. 
SELECT billingcountry, CustomerId, SUM(Total) AS total_revenue
FROM chinook.invoices
WHERE billingcountry = 'Canada'
GROUP BY CustomerId;

#5. Find all tracks with the word “Rock” in the title.
SELECT DISTINCT *
FROM chinook.tracks
WHERE name LIKE '%Rock%';

#6. Retrieve a list of customers along with their total spending.
SELECT SUM(invoices.total) AS total_spending, CustomerId, FirstName, LastName, Company, City, State, Country, PostalCode, Phone, Email
FROM chinook.customers
JOIN chinook.invoices 
ON customers.CustomerId = invoices.CustomerId
GROUP BY customers.CustomerId;

#7. Find all tracks with a length greater than 5 minutes and bytes less than 100000000.
SELECT *
FROM chinook.tracks
WHERE milliseconds >=500000 
AND bytes <=100000000;

#8. Classify customers into “High Spenders” and “Regular Spenders” based on total spending.
SELECT customerid, SUM(total) AS total_spending,
    CASE
        WHEN SUM(total) > 40 THEN 'High Spender'
        ELSE 'Regular Spender'
    END AS spending_category
FROM chinook.invoices
GROUP BY customerid;

#9. Retrieve the top 5 customers with the highest total spending.
SELECT customerid, SUM(total) AS total_spending
FROM chinook.invoices
GROUP BY customerid
ORDER BY total_spending DESC
LIMIT 5;

#10. Provide a query that shows all the tracks (including the album name, media type, and genre).
SELECT t.name AS 'Track Name', a.Title AS 'Album Title', m.Name AS 'Media Type', g.Name AS 'Genre'
FROM chinook.tracks t
INNER JOIN chinook.Albums a
ON a.Albumid = t.AlbumId
INNER JOIN chinook.Media_Types m
ON m.MediaTypeId = t.MediaTypeId
INNER JOIN chinook.Genres g
ON g.GenreId = t.GenreId;

#11. How many invoices were there in 2011?
SELECT COUNT(*)
FROM chinook.invoices
WHERE invoicedate BETWEEN '2011-01-01' 
AND '2011-12-31';

#12. What were the total sales in 2011?
SELECT SUM(Total)
FROM chinook.invoices
WHERE invoicedate BETWEEN '2011-01-01' 
AND '2011-12-31';

#13. List all the employees who are Sales Support Agents.
SELECT *
FROM chinook.employees
WHERE title = 'Sales Support Agent';

#14. Show the total sales made by each Sales Support Agent.
SELECT emp.FirstName, emp.LastName,
ROUND(SUM(Inv.Total), 2) AS 'Total Sales' 
FROM chinook.Employees emp

INNER JOIN chinook.Customers cust 
ON cust.SupportRepId = emp.EmployeeId

INNER JOIN chinook.Invoices Inv 
ON Inv.CustomerId = cust.CustomerId

WHERE emp.Title = 'Sales Support Agent' 
GROUP BY emp.FirstName;

#15. Show which sales agent made the most dollars in sales in 2011.
SELECT emp.FirstName, emp.LastName,
ROUND(SUM(Inv.Total), 2) AS 'Total Sales'
FROM chinook.Employees emp

INNER JOIN chinook.Customers cust
ON cust.SupportRepId = emp.EmployeeId

INNER JOIN chinook.Invoices Inv
ON Inv.CustomerId = cust.CustomerId

WHERE emp.Title = 'Sales Support Agent'
AND Inv.InvoiceDate LIKE '%2011%'
GROUP BY emp.FirstName
ORDER BY (round(sum(Inv.Total), 2)) DESC 
LIMIT 1;

#16. List the invoice total, customer name, country, and Sales Support Agent name for all invoices and customers.
SELECT emp.LastName, emp.Firstname, cust.FirstName, cust.LastName, cust.Country, inv.total
FROM chinook.employees emp 
INNER JOIN chinook.Customers cust 
ON cust.SupportRepId = emp.EmployeeId
INNER JOIN chinook.Invoices Inv 
ON Inv.CustomerId = cust.CustomerId;

#17. Provide a query that shows the invoices associated with each Sales Support Agent (include the Sales Support Agent’s full name).
SELECT emp.LastName, emp.FirstNAme, inv.InvoiceId
FROM chinook.employees emp
INNER JOIN chinook.Customers cust
ON cust.SupportRepId = emp.EmployeeId
INNER JOIN chinook.Invoices Inv
ON Inv.CustomerId = cust.CustomerId;

#18. Show all the purchased track names with each invoice line ID.
SELECT t.Name, i.InvoiceLineId
FROM chinook.Invoice_items i
INNER JOIN chinook.Tracks t
ON i.TrackId = t.TrackId;
